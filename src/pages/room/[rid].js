import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { getSession, useSession } from 'next-auth/react';

import Box from '@mui/material/Box';
import CircularProgress from '@mui/material/CircularProgress';

import Header from '../../components/header/header';
import ShareModal from '../../components/share';
import fetchRoom from '../../../lib/fetchRoom';
import RoomTable from '@/components/roomTable';
import getRoomResults, { getRoomInfo } from '../../../lib/rooms';
import { Button } from '@mui/material';
import { getLinkInfo } from '../../../lib/links';

import { ArrowRepeat } from 'react-bootstrap-icons';

import User from '../../components/header/user';

import copy from 'clipboard-copy';

const BoxStyle = {
	borderRadius: '30px',
	fontWeight: '400',
	fontSize: '1.2rem',
	boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px',
	padding: '2rem',
	height: 'calc(100vh - 210px)',
	width: '94%',
	color: '#696f79',
	paddingTop: '0px',
	paddingLeft: '2.5rem',
};

export default function Session({ userSession, results, linkInfo, room }) {
	const [session, setSession] = useState(userSession);
	const [quizzs, setResult] = useState();
	const [copied, setCopied] = useState(false);
	const [isRotating, setIsRotating] = useState(false);

	const router = useRouter();

	useEffect(() => {
		if (!results) {
			return;
		}
		setResult(JSON.parse(results));
	}, [results]);

	const copyToClipboard = async () => {
		try {
			await copy(new URL(window.location.href).origin + linkInfo.linkShort);
			setCopied(true);
			setTimeout(() => {
				setCopied(false);
			}, 4000);
		} catch (error) {
			console.error('Failed to copy:', error);
		}
	};

	function refreshPage() {
		setIsRotating(true);
		setTimeout(() => setIsRotating(false), 1000);
		router.replace(router.asPath);
	}

	return (
		<>
			<Head>
				<title>Quizzoto - Quizz</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
				<link href="https://fonts.googleapis.com/css2?family=Anta&family=Bebas+Neue&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap" rel="stylesheet" />
				<link rel="stylesheet" href="/result.css" />
			</Head>
			<main>
				<Header />
				<Box display="grid" gridTemplateColumns="repeat(12, 1fr)" gap={2}>
					<Box gridColumn="span 2"></Box>
					<Box gridColumn="span 10" sx={BoxStyle}>
						{quizzs?.statusCode || results === 401 ? (
							<Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>
								<p>Merci de fournir un id de room correct dans l'URL.</p>
							</Box>
						) : quizzs ? (
							<>
								<Box gridColumn="span 12" display="grid" gridTemplateColumns="repeat(12, 1fr)" gap={2}>
									<ArrowRepeat
										size={30}
										style={{
											position: 'absolute',
											cursor: 'pointer',
											right: '40px',
											marginTop: '15px',
											animation: isRotating ? 'rotation 1s ease' : '',
											transformOrigin: 'center',
										}}
										onClick={refreshPage}
									/>
									<Box gridColumn="span 8">
										<h1>{quizzs.quizzTitle}</h1>
										<Box sx={{ display: 'flex', gap: '12px' }}>
											<ShareModal userSession={userSession} />
											<Box>
												<Button variant="contained" target="_blank" href={linkInfo.join}>
													Open Invite menu
												</Button>
											</Box>
											<Box>
												<Button variant="contained" onClick={copyToClipboard}>
													{copied ? 'Copied!' : 'Copy link'}
												</Button>
											</Box>
										</Box>
									</Box>
									<Box gridColumn="span 4" style={{ display: 'flex', alignItems: 'center', height: '200px' }}>
										<table>
											<thead>
												<tr>
													<td>Room Creator</td>
													<td>Quizz Creator</td>
													<td>Link Open</td>
												</tr>
											</thead>
											<tbody>
												<tr>
													<td>
														<div>
															<User scale={'80%'} user={room.user} />
														</div>
													</td>
													<td>
														<div>
															<User scale={'80%'} user={quizzs.user} />
														</div>
													</td>
													<td style={{ textAlign: 'center' }}>
														<div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '66px' }}>{linkInfo.used}</div>
													</td>
												</tr>
											</tbody>
										</table>

										{/* <a target="_blank" href={new URL(window.location.href).origin + linkInfo.linkShort}>
											{linkInfo.linkShort}
										</a> */}
									</Box>
								</Box>
								<RoomTable data={quizzs.results} sx={{ width: '100%', height: '100%' }} />
							</>
						) : (
							<Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>
								<CircularProgress />
							</Box>
						)}
					</Box>
				</Box>
			</main>
		</>
	);
}

export async function getServerSideProps(context) {
	const { rid } = context.params;

	const session = await getSession(context);
	const results = await getRoomResults(session, rid);
	const linkInfo = await getLinkInfo(session, rid);
	const room = await getRoomInfo(session, rid);

	if (linkInfo != 401) {
		const url = context['req']['headers']['x-forwarded-proto'] + '://' + context.req.headers.host + '/join/' + linkInfo.linkShort.split('/')[2];
		linkInfo.join = url;
	}

	return {
		props: {
			userSession: session ?? null,
			results,
			linkInfo,
			room,
		},
	};
}
