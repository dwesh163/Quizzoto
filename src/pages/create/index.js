import { useState, useEffect } from 'react';
import { getSession, useSession, signIn, signOut } from 'next-auth/react';
import Head from 'next/head';
import Header from '../../components/header/header';
import Box from '@mui/material/Box';
import TextField from '@mui/material/TextField';
import MenuItem from '@mui/material/MenuItem';
import FormControl from '@mui/material/FormControl';
import Select from '@mui/material/Select';
import FormGroup from '@mui/material/FormGroup';
import FormControlLabel from '@mui/material/FormControlLabel';
import Checkbox from '@mui/material/Checkbox';
import RadioGroup from '@mui/material/RadioGroup';
import Radio from '@mui/material/Radio';
import InputLabel from '@mui/material/InputLabel';
import { useRouter } from 'next/router';

const QuizzInfo = ({ quizzData, setQuizzData }) => {
	return (
		<table>
			<tbody>
				{Object.keys(quizzData).map((key, index) => (
					<tr key={index}>
						<td style={{ fontWeight: '600', padding: '10px 0px', fontSize: '1.5rem' }}>{key}:</td>
						<td style={{ paddingLeft: '40px' }}>
							<TextField
								margin="dense"
								id="outlined-controlled"
								label={key}
								value={quizzData[key]}
								onChange={(event) => {
									setQuizzData((prevData) => ({
										...prevData,
										quizzInfo: {
											...prevData.quizzInfo,
											[key]: event.target.value,
										},
									}));
								}}
							/>
						</td>
					</tr>
				))}
			</tbody>
		</table>
	);
};

export default function Page() {
	const { data: session, status } = useSession();

	if (status === 'loading') {
		return <p>Loading...</p>;
	}

	const router = useRouter();

	const questionTypes = ['textfield', 'radios', 'checkboxes'];
	const [quizzData, setQuizzData] = useState({
		creator: session?.user?.id,
		questions: [
			{
				questionTitle: '',
				answers: [''],
				questionType: '',
				correctAnswer: [''],
				pointsIfCorrect: 2,
				minusPointsIfWrong: 1,
			},
		],
		quizzDescription: '',
		quizzImg: '',
		quizzInfo: {
			Date: new Date().toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' }),
			TimeLimit: '',
			Attempts: '',
			Points: '',
		},
		quizzSlug: '',
		quizzTitle: '',
	});

	const windowSize = useWindowSize();

	function useWindowSize() {
		const [windowSize, setWindowSize] = useState({
			width: undefined,
			height: undefined,
		});
		useEffect(() => {
			function handleResize() {
				setWindowSize({
					width: window.innerWidth,
					height: window.innerHeight,
				});
			}
			window.addEventListener('resize', handleResize);
			handleResize();
			return () => window.removeEventListener('resize', handleResize);
		}, []);

		return windowSize;
	}

	return (
		<>
			<Head>
				<title>Quizzoto - Quizz</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
				<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" />
				<link rel="stylesheet" href="/quizz.css" />
				<link rel="preconnect" href="https://fonts.googleapis.com" />
				<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
				<link href="https://fonts.googleapis.com/css2?family=Anta&family=Bebas+Neue&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap" rel="stylesheet" />
			</Head>
			<main>
				<Header />
				<Box display="grid" gridTemplateColumns="repeat(12, 1fr)" gap={2}>
					<Box gridColumn="span 2"></Box>
					<Box gridColumn="span 10" className="box" style={{ height: '100%', width: 'calc(100% - 90px)' }}>
						{status != 'unauthenticated' ? (
							<>
								<h1>Create Quizz</h1>

								<TextField
									margin="dense"
									id="outlined-controlled"
									label="Quizz title"
									value={quizzData.quizzTitle}
									onChange={(event) => {
										setQuizzData((prevData) => ({
											...prevData,
											quizzTitle: event.target.value,
										}));
									}}
								/>
								<TextField
									margin="dense"
									sx={{ marginLeft: '5px' }}
									id="outlined-controlled"
									label="Quizz slug"
									value={quizzData.quizzSlug}
									onChange={(event) => {
										setQuizzData((prevData) => ({
											...prevData,
											quizzSlug: event.target.value,
										}));
									}}
								/>
								<Box>
									<Box display="grid" gridTemplateColumns="repeat(12, 1fr)" gap={2} style={{ marginTop: '15px' }}>
										<Box gridColumn="span 6">
											<div style={{ position: 'relative', width: '100%', height: '300px', borderRadius: '30px', overflow: 'hidden' }}>{/* <img src={123} style={{ width: '100%', height: '100%', objectFit: 'cover' }} /> */}</div>
										</Box>

										<Box gridColumn="span 6" style={{ marginLeft: '25px' }}>
											<QuizzInfo quizzData={quizzData.quizzInfo} setQuizzData={setQuizzData} />
										</Box>
									</Box>
									<h3> Instructions</h3>
									<TextField
										margin="dense"
										id="outlined-multiline-static"
										multiline
										rows={4}
										label="quizz description"
										fullWidth
										value={quizzData.quizzDescription}
										onChange={(event) => {
											setQuizzData((prevData) => ({
												...prevData,
												quizzDescription: event.target.value,
											}));
										}}
									/>
									<h3> Quizz</h3>

									{quizzData.questions.map((question, index) => (
										<div key={index}>
											<Box sx={{ display: 'flex', gap: '10px', marginBottom: '25px', marginTop: '15px' }}>
												<TextField
													id="outlined-controlled"
													sx={{ width: '80%' }}
													label="Quizz title"
													value={question.questionTitle}
													onChange={(event) => {
														const newQuestions = [...quizzData.questions];
														newQuestions[index].questionTitle = event.target.value;
														setQuizzData((prevData) => ({
															...prevData,
															questions: newQuestions,
														}));
													}}
												/>
												<FormControl sx={{ minWidth: '20%' }}>
													<InputLabel id="demo-simple-select-label">Question Type</InputLabel>
													<Select
														labelId="demo-simple-select-label"
														id="demo-simple-select"
														value={question.questionType}
														label="Question Type"
														onChange={(event) => {
															const newQuestions = [...quizzData.questions];
															newQuestions[index].questionType = event.target.value;
															setQuizzData((prevData) => ({
																...prevData,
																questions: newQuestions,
															}));
														}}>
														{questionTypes.map((type, typeIndex) => (
															<MenuItem key={typeIndex} value={type}>
																{type}
															</MenuItem>
														))}
													</Select>
												</FormControl>
											</Box>

											{question.questionType === 'textfield' && (
												<TextField
													margin="dense"
													id="outlined-controlled"
													label="Correct Answer"
													value={question.correctAnswer.join(', ')}
													onChange={(event) => {
														const newQuestions = [...quizzData.questions];
														newQuestions[index].correctAnswer = event.target.value.split(', ');
														newQuestions[index].answers = event.target.value.split(', ');
														setQuizzData((prevData) => ({
															...prevData,
															questions: newQuestions,
														}));
													}}
												/>
											)}
											{question.questionType === 'checkboxes' && (
												<FormGroup>
													{question.answers.map((answer, answerIndex) => (
														<div key={answerIndex}>
															<FormControlLabel
																control={<Checkbox sx={{ marginTop: 'calc(25% + 3px)' }} checked={question.correctAnswer.includes(answer)} />}
																onChange={(event) => {
																	const newQuestions = [...quizzData.questions];
																	const checked = event.target.checked;
																	if (checked && !newQuestions[index].correctAnswer.includes(answer)) {
																		newQuestions[index].correctAnswer.push(answer);
																	} else if (!checked && newQuestions[index].correctAnswer.includes(answer)) {
																		newQuestions[index].correctAnswer = newQuestions[index].correctAnswer.filter((value) => value !== answer);
																	}
																	newQuestions[index].correctAnswer = newQuestions[index].correctAnswer.filter((value) => newQuestions[index].answers.includes(value));

																	setQuizzData((prevData) => ({
																		...prevData,
																		questions: newQuestions,
																	}));
																}}
															/>
															<TextField
																margin="dense"
																label={`Answer ${answerIndex + 1}`}
																value={answer}
																onChange={(event) => {
																	const newQuestions = [...quizzData.questions];
																	newQuestions[index].answers[answerIndex] = event.target.value;
																	setQuizzData((prevData) => ({
																		...prevData,
																		questions: newQuestions,
																	}));
																}}
															/>
														</div>
													))}

													<button
														onClick={(event) => {
															const newQuestions = [...quizzData.questions];
															newQuestions[index].answers.push('');
															setQuizzData((prevData) => ({
																...prevData,
																questions: newQuestions,
															}));
														}}>
														+ Checkbox
													</button>
												</FormGroup>
											)}

											{question.questionType === 'radios' && (
												<FormGroup>
													{question.answers.map((answer, answerIndex) => {
														const newQuestions = [...quizzData.questions];
														if (newQuestions[index].correctAnswer.length >= 2) {
															newQuestions[index].correctAnswer = newQuestions[index].correctAnswer.slice(0, 1);
															setQuizzData((prevData) => ({
																...prevData,
																questions: newQuestions,
															}));
														}
														return (
															<div key={answerIndex}>
																<FormControlLabel
																	control={<Radio sx={{ marginTop: 'calc(25% + 3px)' }} checked={question.correctAnswer.includes(answer)} />}
																	onChange={(event) => {
																		const newQuestions = [...quizzData.questions];
																		const checked = event.target.checked;
																		if (checked && !newQuestions[index].correctAnswer.includes(answer)) {
																			newQuestions[index].correctAnswer = [answer];
																		} else if (!checked && newQuestions[index].correctAnswer.includes(answer)) {
																			newQuestions[index].correctAnswer = newQuestions[index].correctAnswer.filter((value) => value !== answer);
																		}

																		setQuizzData((prevData) => ({
																			...prevData,
																			questions: newQuestions,
																		}));
																	}}
																/>
																<TextField
																	margin="dense"
																	label={`Answer ${answerIndex + 1}`}
																	value={answer}
																	onChange={(event) => {
																		const newQuestions = [...quizzData.questions];
																		newQuestions[index].answers[answerIndex] = event.target.value;
																		setQuizzData((prevData) => ({
																			...prevData,
																			questions: newQuestions,
																		}));
																	}}
																/>
															</div>
														);
													})}
													<button
														onClick={(event) => {
															const newQuestions = [...quizzData.questions];
															newQuestions[index].answers.push('');
															setQuizzData((prevData) => ({
																...prevData,
																questions: newQuestions,
															}));
														}}>
														+ Radio
													</button>
												</FormGroup>
											)}

											<Box sx={{ width: '100%', display: 'flex', marginTop: '50px', height: '30px', justifyContent: 'space-between' }}>
												<hr style={{ width: '100%', margin: '15px 15px 15px 0', opacity: '0.5' }} />
												<button
													style={{ width: '100px' }}
													onClick={(event) => {
														const newQuestions = [...quizzData.questions];
														const insertIndex = index + 1;
														newQuestions.splice(insertIndex, 0, {
															questionTitle: '',
															answers: [''],
															questionType: '',
															correctAnswer: ['-'],
															pointsIfCorrect: 2,
															minusPointsIfWrong: 1,
														});
														setQuizzData((prevData) => ({
															...prevData,
															questions: newQuestions,
														}));
													}}>
													+ Question
												</button>
											</Box>

											{quizzData.questions.length == index + 1 && (
												<Box>
													<button
														style={{ width: '100px', marginTop: '50px' }}
														onClick={(event) => {
															const createQuizz = async () => {
																fetch(`/api/setNewQuizz`, { method: 'POST', body: JSON.stringify(quizzData) }).then((result) => {
																	return router.push({
																		pathname: `/quizz`,
																	});
																});
															};
															createQuizz();
														}}>
														Create Quizz
													</button>
												</Box>
											)}
										</div>
									))}
								</Box>
							</>
						) : (
							<Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>
								<p>Please Sign In</p>
							</Box>
						)}
					</Box>
				</Box>
			</main>
		</>
	);
}

export async function getServerSideProps(context) {
	const session = await getSession(context);

	return {
		props: {
			session: session ?? null,
		},
	};
}
